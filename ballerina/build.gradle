// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - IBM MQ Package'

def packageName = "ibm.ibmmq"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

configurations {
    externalJars
}

dependencies {
    /* Json dependencies */
    externalJars(group: 'org.json', name: 'json', version: "${jsonVersion}") {
        transitive = false
    }
    /* IBM MQ dependencies */
    externalJars(group: 'com.ibm.mq', name: 'com.ibm.mq.allclient', version: "${ibmMQVersion}") {
        transitive = false
    }
    /* Jackson dependencies */
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jacksonVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}") {
        transitive = false
    }
    /* JMS dependencies */
    externalJars(group: 'javax.jms', name: 'javax.jms-api', version: "${jmsVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@ibmmq.version@", project.ibmMQVersion)
        newConfig = newConfig.replace("@json.version@", project.jsonVersion)
        newConfig = newConfig.replace("@jackson.version@", project.jacksonVersion)
        newConfig = newConfig.replace("@jms.version@", project.jmsVersion)
        ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

 task startIBMMQServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=ibmmq-test"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("ibmmq-test")) {
                println "Starting IBMMQ server and waiting for it to be healthy..."
                exec {
                    commandLine 'sh', '-c', "docker compose -f tests/resources/docker-compose.yaml up --wait"
                    standardOutput = stdOut
                }
                println "IBMMQ server is ready."
            } else {
                println "IBMMQ server is already running."
            }
        }
    }
 }

 task stopIBMMQServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=ibmmq-test"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("ibmmq-test")) {
                println "Stopping IBMMQ server."
                exec {
                    commandLine 'sh', '-c', "docker compose -f tests/resources/docker-compose.yaml down"
                    standardOutput = stdOut
                }
                println stdOut.toString()
            } else {
                println "IBMMQ server is not started."
            }
        }
    }
 }

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"

test.dependsOn ":${packageName}-native:build"
test.dependsOn startIBMMQServer
test.finalizedBy stopIBMMQServer

publish.dependsOn build
publishToMavenLocal.dependsOn build
